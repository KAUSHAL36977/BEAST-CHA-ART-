// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  attributes    UserAttributes?
  workspaces    WorkspaceMember[]
  pages         Page[]
  blocks        Block[]
  comments      Comment[]
  notifications Notification[]
}

// Goals and Progress Tracking
model Goal {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("active")
  startDate   DateTime @default(now())
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

// User Attributes
model UserAttributes {
  id            String   @id @default(uuid())
  height        Float?
  weight        Float?
  age           Int?
  physical      Int?     @default(0)
  mental        Int?     @default(0)
  intellect     Int?     @default(0)
  ambition      Int?     @default(0)
  discipline    Int?     @default(0)
  relationship  Int?     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Workspace Management
model Workspace {
  id          String    @id @default(uuid())
  name        String
  description String?
  icon        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  members     WorkspaceMember[]
  pages       Page[]
  settings    WorkspaceSettings?
}

model WorkspaceMember {
  id          String    @id @default(uuid())
  role        UserRole    @default(MEMBER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  @@unique([workspaceId, userId])
}

model WorkspaceSettings {
  id          String    @id @default(uuid())
  theme       String    @default("light")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @unique
}

// Page Management
model Page {
  id          String    @id @default(uuid())
  title       String
  icon        String?
  cover       String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  parent      Page?     @relation("PageHierarchy", fields: [parentId], references: [id])
  parentId    String?
  children    Page[]    @relation("PageHierarchy")
  blocks      Block[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
}

// Block Management
model Block {
  id          String    @id @default(uuid())
  type        BlockType
  content     Json      // Stores different content based on block type
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  page        Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId      String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
}

// Comments
model Comment {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  page        Page      @relation(fields: [pageId], references: [id])
  pageId      String
  block       Block?    @relation(fields: [blockId], references: [id])
  blockId     String?
}

// Notifications
model Notification {
  id          String    @id @default(uuid())
  type        NotificationType
  content     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

// Enums
enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

enum BlockType {
  TEXT
  HEADING1
  HEADING2
  HEADING3
  BULLETED_LIST
  NUMBERED_LIST
  TO_DO
  TOGGLE
  CODE
  IMAGE
  VIDEO
  FILE
  EMBED
  DIVIDER
  QUOTE
  CALLOUT
}

enum NotificationType {
  MENTION
  COMMENT
  UPDATE
  INVITE
  SHARE
}
